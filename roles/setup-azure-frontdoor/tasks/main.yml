
# No ansible for this, so using CLI mostly
# Command group 'afd' is in preview and under development. Reference and support levels: https://aka.ms/CLI_refstatus
- name: Get subscription_id for later
  azure.azcollection.azure_rm_subscription_info:
    all: true
  register: subscription_output

- name: Create Front Door Profile
  command: >
    az afd profile create \
    --profile-name {{resource_prefix}}-afd \
    --resource-group {{ resource_group_name }} \
    --sku Premium_AzureFrontDoor

- set_fact:
    waf_policy_name: "{{ alphanumeric_resource_name_prefix | lower }}wafpolicy"

- name: Create Policy for WAF
  command: >
    az network front-door waf-policy create \
      --name {{ waf_policy_name }} \
      --resource-group {{ resource_group_name }} \
      --mode Prevention
  # or 'Detection'

# DRS 2.1 includes 17 rule groups, as shown in the following table.
# Each group contains multiple rules, and you can customize behavior for individual rules, rule groups, or entire rule set.
# DRS 2.1 is baselined off the Open Web Application Security Project (OWASP) Core Rule Set (CRS) 3.3.2 and includes additional proprietary protections rules developed by Microsoft Threat Intelligence team.
# https://learn.microsoft.com/en-us/azure/web-application-firewall/ag/application-gateway-crs-rulegroups-rules?tabs=owasp32#drs-21
- name: Add managed default ruleset to WAF policy
  command: >
    az network front-door waf-policy managed-rules add \
      --resource-group {{ resource_group_name }} \
      --policy-name {{ waf_policy_name }} \
      --type Microsoft_DefaultRuleSet --version 2.1 --action Block

# The Bot Manager 1.1 rule set is an enhancement to Bot Manager 1.0 rule set. It provides enhanced protection against malicious bots, and increases good bot detection.
# https://learn.microsoft.com/en-us/azure/web-application-firewall/ag/application-gateway-crs-rulegroups-rules?tabs=owasp32#bot-manager-11
- name: Add bot ruleset to WAF policy
  command: >
    az network front-door waf-policy managed-rules add \
      --resource-group {{ resource_group_name }} \
      --policy-name {{ waf_policy_name }} \
      --type Microsoft_BotManagerRuleSet \
      --version 1.1

# The following rules are disabled by default as they result in false positives.
# https://learn.microsoft.com/en-us/azure/web-application-firewall/ag/application-gateway-crs-rulegroups-rules?tabs=owasp32#microsoft-threat-intelligence-collection-rules

# We also disable a lot because CKAN will trigger them, these were found by logging the WAF logs and seeing what was being triggered during normal use of CKAN.
# Additional custom rules can be added to the list below, in the format ["rule-set", "rule-group-id", "rule-id"], or defined in the inventory/group_vars etc as a list of lists (like this) under `custom_azure_waf_rule_overrides`
- name: Define rules we disable
  set_fact:
    azure_waf_rule_overrides:
    # --type Microsoft_DefaultRuleSet --rule-group-id SQLI --rule-id 942430
      - ["Microsoft_DefaultRuleSet", "SQLI", "942430"]
      - ["Microsoft_DefaultRuleSet", "RFI", "931130"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942440"]
      - ["Microsoft_DefaultRuleSet", "MS-ThreatIntel-SQLI", "99031002"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942120"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942200"]
      - ["Microsoft_DefaultRuleSet", "PHP", "933210"]
      - ["Microsoft_DefaultRuleSet", "General", "200003"]
      - ["Microsoft_DefaultRuleSet", "General", "200002"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942400"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942210"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942410"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942150"]
      - ["Microsoft_DefaultRuleSet", "MS-ThreatIntel-SQLI", "99031003"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942340"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942260"]
      - ["Microsoft_DefaultRuleSet", "MS-ThreatIntel-SQLI", "99031004"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942330"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942100"]
      - ["Microsoft_DefaultRuleSet", "PHP", "933160"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942370"]
      - ["Microsoft_DefaultRuleSet", "PROTOCOL-ATTACK", "921110"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942110"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942140"]
      - ["Microsoft_DefaultRuleSet", "MS-ThreatIntel-SQLI", "99031001"]
      - ["Microsoft_DefaultRuleSet", "XSS", "941340"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942190"]
      - ["Microsoft_DefaultRuleSet", "XSS", "941150"]
      - ["Microsoft_DefaultRuleSet", "XSS", "941370"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942390"]
      - ["Microsoft_DefaultRuleSet", "SQLI", "942380"]

- name: Apply WAF Rule Overrides
  command: >
    az network front-door waf-policy managed-rules override add \
      --disabled \
      --policy-name {{waf_policy_name}} \
      --resource-group {{ resource_group_name }} \
      --type {{ item[0] }} \
      --rule-group-id {{ item[1] }} \
      --rule-id {{ item[2] }}
  loop: "{{ azure_waf_rule_overrides + (custom_azure_waf_rule_overrides | default([])) }}"

- name: Create Front Door Endpoint For Ckan
  command: >
    az afd endpoint create \
      --resource-group {{ resource_group_name }} \
      --profile-name {{resource_prefix}}-afd \
      --endpoint-name {{resource_prefix|lower}}-ckan \
      --enabled-state Enabled
  register: ckan_endpoint_output

- name: Create Front Door Endpoint For Giftless
  command: >
    az afd endpoint create \
      --resource-group {{ resource_group_name }} \
      --profile-name {{resource_prefix}}-afd \
      --endpoint-name {{resource_prefix|lower}}-giftless \
      --enabled-state Enabled
  register: giftless_endpoint_output

- set_fact:
    ckan_hostname: "https://{{ (ckan_endpoint_output.stdout|from_json).hostName }}"

- name: Add a ruleset to set CORS headers for Giftless
  command: >
     az afd rule-set create \
      --resource-group {{ resource_group_name }} \
      --name giftlesscors \
      --profile-name {{resource_prefix}}-afd

- name: CORS Origin header and condition base rule
  command: >
    az afd rule create \
      --resource-group {{ resource_group_name }} \
      --rule-set-name giftlesscors \
      --profile-name {{resource_prefix}}-afd \
      --rule-name corsheaders \
      --selector Origin \
      --match-variable RequestHeader \
      --operator Equal \
      --match-values {{ ckan_hostname }} \
      --action-name ModifyResponseHeader \
      --header-action Overwrite \
      --header-name Access-Control-Allow-Origin \
      --header-value {{ ckan_hostname }}

- name: Add CORS Headers header to rule
  command: >
    az afd rule action add --resource-group {{ resource_group_name }} \
      --rule-set-name giftlesscors \
      --profile-name {{resource_prefix}}-afd \
      --rule-name corsheaders \
      --action-name ModifyResponseHeader \
      --header-action Overwrite \
      --header-name Access-Control-Allow-Headers \
      --header-value '*'

- name: Add CORS Method header to rule
  command: >
    az afd rule action add --resource-group {{ resource_group_name }} \
      --rule-set-name giftlesscors \
      --profile-name {{resource_prefix}}-afd \
      --rule-name corsheaders \
      --action-name ModifyResponseHeader \
      --header-action Overwrite \
      --header-name Access-Control-Allow-Methods \
      --header-value '*'

# Origin Groups
- name: Create Front Door Origin Group (CKAN)
  command: >
    az afd origin-group create \
    --resource-group {{ resource_group_name }} \
    --profile-name {{resource_prefix}}-afd \
    --origin-group-name {{resource_prefix}}-og-ckan \
    --probe-request-type GET \
    --probe-protocol Http \
    --probe-interval-in-seconds 60 \
    --probe-path / \
    --sample-size 4 \
    --successful-samples-required 3 \
    --additional-latency-in-milliseconds 50

# Origin Groups
- name: Create Front Door Origin Group (giftless)
  command: >
    az afd origin-group create \
    --resource-group {{ resource_group_name }} \
    --profile-name {{resource_prefix}}-afd \
    --origin-group-name {{resource_prefix}}-og-giftless \
    --probe-request-type GET \
    --probe-protocol Http \
    --probe-interval-in-seconds 60 \
    --probe-path / \
    --sample-size 4 \
    --successful-samples-required 3 \
    --additional-latency-in-milliseconds 50

# get details for the Private Link Service that has been created for the CKAN k8s service
- name: Get Private Link Service details (ckan)
  command: >
    az network private-link-service show \
    --name {{ ckan_pls_name }} \
    --resource-group "{{ node_group_name }}" \
    -o json
  register: ckan_pls_output

- set_fact:
    ckan_pls_alias: "{{ (ckan_pls_output.stdout|from_json).alias }}"

- name: Show pls
  debug: "msg={{ ckan_pls_alias }}"

- name: Create an origin with Private Link to AKS (CKAN)
  command: >
      az afd origin create -g group
      --host-name {{ ckan_pls_alias }} \
      --origin-host-header {{ ckan_fqdn }} \
      --resource-group {{ resource_group_name }} \
      --profile-name {{resource_prefix}}-afd \
      --origin-group-name {{resource_prefix}}-og-ckan \
      --origin-name ckan-origin \
      --priority 1 \
      --weight 1000 \
      --enabled-state Enabled \
      --http-port 80 \
      --https-port 80 \
      --enable-private-link true \
      --private-link-resource "/subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ node_group_name }}/providers/Microsoft.Network/privateLinkServices/{{ ckan_pls_name }}" \
      --private-link-request-message 'Please approve this request' \
      --private-link-location {{ azure_region }}

- name: Get Private Link Service details (giftless)
  command: >
    az network private-link-service show \
    --name {{ giftless_pls_name }} \
    --resource-group "{{ node_group_name }}" \
    -o json
  register: giftless_pls_output

- set_fact:
    giftless_pls_alias: "{{ (giftless_pls_output.stdout|from_json).alias }}"

- name: Create an origin with Private Link to AKS (Giftless)
  command: >
      az afd origin create -g group
      --host-name {{ giftless_pls_alias }} \
      --origin-host-header {{ giftless_pls_alias }} \
      --resource-group {{ resource_group_name }} \
      --profile-name {{resource_prefix}}-afd \
      --origin-group-name {{resource_prefix}}-og-giftless \
      --origin-name ckan-origin \
      --priority 1 \
      --weight 1000 \
      --enabled-state Enabled \
      --enable-private-link true \
      --http-port 5001 \
      --https-port 5001 \
      --private-link-resource "/subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ node_group_name }}/providers/Microsoft.Network/privateLinkServices/{{ giftless_pls_name }}" \
      --private-link-request-message 'Please approve this request' \
      --private-link-location {{ azure_region }}

# If a custom domain is set, the route is attached to that, if not (ie on first run or without a custom domain) it is attached to the default domain
# The WAf policy is attached to the route later
- name: Create route for CKAN
  command: >
    az afd route create \
    --resource-group {{ resource_group_name }} \
    --profile-name {{resource_prefix}}-afd \
    --route-name ckan-route \
    --endpoint-name {{resource_prefix|lower}}-ckan \
    --patterns '/*' \
    --origin-group {{resource_prefix}}-og-ckan \
    --enabled-state Enabled \
    --supported-protocols Https \
    --https-redirect Enabled \
    --forwarding-protocol HttpOnly \
    {{ custom_afd_domain | ternary('--custom-domains custom_afd_domain', '--link-to-default-domain Enabled') }}

- name: Create route for Giftless
  command: >
    az afd route create \
    --resource-group {{ resource_group_name }} \
    --profile-name {{resource_prefix}}-afd \
    --route-name giftless-route \
    --endpoint-name {{resource_prefix|lower}}-giftless \
    --patterns '/*' \
    --origin-group {{resource_prefix}}-og-giftless \
    --enabled-state Enabled \
    --supported-protocols Https \
    --link-to-default-domain Enabled \
    --https-redirect Enabled \
    --forwarding-protocol HttpOnly \
    --rule-sets giftlesscors

- name: Get PLS details for approval (CKAN)
  command: >
    az network private-endpoint-connection list \
    --id /subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ node_group_name }}/providers/Microsoft.Network/privateLinkServices/{{ ckan_pls_name }} \
    -o json
  register: ckan_pls_pending_output

- name: Get PLS details for approval (giftless)
  command: >
    az network private-endpoint-connection list \
    --id /subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ node_group_name }}/providers/Microsoft.Network/privateLinkServices/{{ giftless_pls_name }} \
    -o json
  register: giftless_pls_pending_output

- name: Approve the Private Link Services (Giftless)
  command: >
    az network private-endpoint-connection approve \
    -g {{ node_group_name }} \
    --type Microsoft.Network/privateLinkServices \
    --resource-name {{ giftless_pls_name }}
    -n {{ (giftless_pls_pending_output.stdout|from_json)[0].name }}
    --description "Approved"
  when: (giftless_pls_pending_output.stdout|from_json)[0].properties.privateLinkServiceConnectionState.status == "Pending"

- name: Approve the Private Link Services (CKAN)
  command: >
    az network private-endpoint-connection approve \
    -g {{ node_group_name }} \
    --type Microsoft.Network/privateLinkServices \
    --resource-name {{ ckan_pls_name }}
    -n {{ (ckan_pls_pending_output.stdout|from_json)[0].name }}
    --description "Approved"
  when: (ckan_pls_pending_output.stdout|from_json)[0].properties.privateLinkServiceConnectionState.status == "Pending"

# - name: Apply the WAF policy to the endpoint
#   command: >
#     az afd security-policy create \
#       --resource-group {{ resource_group_name }} \
#       --profile-name {{resource_prefix}}-afd \
#       --security-policy-name contososecurity \
#       --domains /subscriptions/mysubscription/resourcegroups/myRGFD/providers/Microsoft.Cdn/profiles/contosoafd/afdEndpoints/contosofrontend --waf-policy /subscriptions/mysubscription/resourcegroups/myRGFD/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/contosoWAF
