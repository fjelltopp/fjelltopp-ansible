---
- name: Get tenant_id for later
  azure.azcollection.azure_rm_subscription_info:
    all: true
  register: subscription_output

- name: Create a resource group
  azure_rm_resourcegroup:
    name: "{{ resource_group_name }}"
    location: "{{ azure_region }}"

- name: Create dedicated Virtual Network
  azure_rm_virtualnetwork:
    resource_group: "{{ resource_group_name }}"
    name: "{{resource_prefix}}-v-net"
    address_prefixes_cidr:
      - "{{vpc_cidr_block}}"
  register: vnet_output
    
- name: Create a subnet for AKS
  azure_rm_subnet:
    resource_group: "{{ resource_group_name }}"
    virtual_network_name: "{{resource_prefix}}-v-net"
    name: sb_internal_01_aks
    address_prefix_cidr: "{{vpc_cidr_subnet1}}"
    private_endpoint_network_policies: "Disabled" # https://learn.microsoft.com/en-us/azure/private-link/disable-private-link-service-network-policy?tabs=private-link-network-policy-cli
  register: subnet_output

- name: AKS Cluster
  azure_rm_aks:
    name: "{{resource_prefix}}-aks"
    resource_group: "{{ resource_group_name }}"
    node_resource_group: "{{ node_group_name }}"
    dns_prefix: "{{ application_name|lower }}"
    kubernetes_version: "{{ k8s_version }}"
    api_server_access_profile:
      enable_private_cluster: true
    agent_pool_profiles:
      - name: system
        count: 1
        vm_size: standard_a2_v2
        vnet_subnet_id: "{{subnet_output.state.id}}"
        mode: System
      - name: default
        count: "{{ worker_nodes_desired }}"
        enable_auto_scaling: true
        min_count: "{{ worker_nodes_min }}"
        max_count: "{{ worker_nodes_max }}"
        vm_size: "{{worker_instance_type}}"
        vnet_subnet_id: "{{subnet_output.state.id}}"
  register: aks_output

# TODO: Remove public control plane network with CLI

- name: Get Service Principal for AKS
  command: >
      az aks show --resource-group {{ resource_group_name }} --name {{resource_prefix}}-aks --query "identity"  
  register: sp_output_raw

- set_fact:
    aks_sp: "{{ (sp_output_raw.stdout|from_json).principalId }}"

- name: Show SP
  debug: "msg={{ aks_sp }}"

- name: Allow AKS SP to create network elements
  azure_rm_roleassignment:
    assignee_object_id: "{{ aks_sp }}"
    role_definition_id: "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7" # Network Contributor (https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles/networking#network-contributor)
    scope: "/subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ resource_group_name }}/providers/Microsoft.Network/virtualNetworks/{{resource_prefix}}-v-net"

- name: Create a storage account for the data lake
  azure_rm_storageaccount:
    resource_group: "{{ resource_group_name }}"
    name: "{{ storage_account_name }}"
    kind: StorageV2
    type: Standard_ZRS
    is_hns_enabled: true
    public_network_access: Disabled

- name: Create managed disk for k8s nodes
  azure_rm_manageddisk:
    name: "{{resource_prefix}}-manageddisk-aks"
    resource_group: "{{aks_output.node_resource_group}}"
    disk_size_gb: 4

- name: Create an azure container registry
  azure_rm_containerregistry:
    name: "{{acr_name}}"
    resource_group: "{{ resource_group_name }}"
    admin_user_enabled: true
    sku: Premium
    # public-network-enabled: false # TODO: this isn't supported so will need doing with the CLI

- name: Create key vault
  azure_rm_keyvault:
    resource_group: "{{ resource_group_name }}"
    vault_name: "{{resource_prefix}}-keyvault"
    vault_tenant: "{{ subscription_output.subscriptions[0].tenant_id }}"
    sku:
      family: A
      name: standard
    access_policies:
      - tenant_id: "{{ subscription_output.subscriptions[0].tenant_id }}"
        object_id: "{{ aks_sp }}"
        keys:
          - get
          - list

- name: Create private endpoint for ACR
  azure.azcollection.azure_rm_privateendpoint:
    resource_group: "{{ resource_group_name }}"
    name: "{{resource_prefix}}-pe-acr"
    state: present
    private_link_service_connections:
      - name: "{{resource_prefix}}-pe-acr"
        private_link_service_id: "/subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ resource_group_name }}/providers/Microsoft.ContainerRegistry/registries/{{acr_name}}"
        group_ids: 
          - "registry"
    subnet:
      id: "{{subnet_output.state.id}}"
  
- name: Create private endpoint for vault
  azure.azcollection.azure_rm_privateendpoint:
    resource_group: "{{ resource_group_name }}"
    name: "{{resource_prefix}}-pe-keyvault"
    state: present
    private_link_service_connections:
      - name: "{{resource_prefix}}-pe-acr"
        private_link_service_id: "/subscriptions/{{ subscription_output.subscriptions[0].subscription_id }}/resourceGroups/{{ resource_group_name }}/providers/Microsoft.KeyVault/vaults/{{vault_name}}"
        group_ids: 
          - "vault"
    subnet:
      id: "{{subnet_output.state.id}}"
  
# No ansible for this, so using CLI
- name: Create Front Door Profile
  command: >
    az afd profile create \
    --profile-name {{resource_prefix}}-afd \
    --resource-group {{ resource_group_name }} \
    --sku Premium_AzureFrontDoor

- name: Create Front Door Endpoint
  command: >
    az afd endpoint create \
      --resource-group {{ resource_group_name }} \
      --profile-name {{resource_prefix}}-afd \
      --endpoint-name {{resource_prefix}}-in \
      --enabled-state Enabled

- name: Create Front Door Origin Group
  command: >      
    az afd origin-group create \
    --resource-group {{ resource_group_name }} \
    --profile-name {{resource_prefix}}-afd \
    --origin-group-name {{resource_prefix}}-aks-og \
    --probe-request-type GET \
    --probe-protocol Http \
    --probe-interval-in-seconds 60 \
    --probe-path / \
    --sample-size 4 \
    --successful-samples-required 3 \
    --additional-latency-in-milliseconds 50

# - name: Create an origin with Private Link to AKS
#   command: >
#       az afd origin create -g group 
#       --host-name example.contoso.com 
#       --profile-name profile
#       --origin-group-name originGroup 
#       --origin-name origin1 
#       --origin-host-header example.contoso.com 
#       --priority 1 
#       --weight 500 
#       --enabled-state Enabled 
#       --http-port 80
#       --https-port 443 
#       --private-link-resource /subscriptions/00000000-0000-0000-0000-
#       000000000000/resourceGroups/group/providers/Microsoft.Storage/storageAccounts/plstest
#       --private-link-location EastUS 
#       --private-link-request-message 'Please approve this request'
#       --private-link-sub-resource-type table
