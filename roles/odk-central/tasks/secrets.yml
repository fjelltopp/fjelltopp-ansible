---
- name: Init missing secrets
  block:

    - name: Generate ODK postgres password
      set_fact:
        new_odk_postgres_password: "{{ lookup('community.general.random_string', length=32, special=false) }}"
      when: not odk_postgres_password|default(None)

    - name: Add odk_postgres_password to AWS Secrets Manager
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_odk_postgres_password"
        state: present
        secret_type: 'string'
        secret: "{{ new_odk_postgres_password }}"
      when: not odk_postgres_password|default(None)

    - name: Update odk_postgres_password
      set_fact:
        odk_postgres_password: "{{ new_odk_postgres_password }}"
      when: new_odk_postgres_password|default(None)

    - name: Generate odk_enketo_encryption_key
      set_fact:
        new_odk_enketo_encryption_key: "{{ lookup('community.general.random_string', length=64, special=false) }}"
      when: not odk_enketo_encryption_key|default(None)

    - name: Add odk_enketo_encryption_key to AWS Secrets Manager
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_odk_enketo_encryption_key"
        state: present
        secret_type: 'string'
        secret: "{{ new_odk_enketo_encryption_key }}"
      when: not odk_enketo_encryption_key|default(None)

    - name: Update odk_enketo_encryption_key
      set_fact:
        odk_enketo_encryption_key: "{{ new_odk_enketo_encryption_key }}"
      when: new_odk_enketo_encryption_key|default(None)

    - name: Generate odk_enketo_less_secure_encryption_key
      set_fact:
        new_odk_enketo_less_secure_encryption_key: "{{ lookup('community.general.random_string', length=32, special=false) }}"
      when: not odk_enketo_less_secure_encryption_key|default(None)

    - name: Add odk_enketo_less_secure_encryption_key to AWS Secrets Manager
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_odk_enketo_less_secure_encryption_key"
        state: present
        secret_type: 'string'
        secret: "{{ new_odk_enketo_less_secure_encryption_key }}"
      when: not odk_enketo_less_secure_encryption_key|default(None)

    - name: Update odk_enketo_less_secure_encryption_key
      set_fact:
        odk_enketo_less_secure_encryption_key: "{{ new_odk_enketo_less_secure_encryption_key }}"
      when: new_odk_enketo_less_secure_encryption_key|default(None)

    - name: Generate odk_enketo_api_key
      set_fact:
        new_odk_enketo_api_key: "{{ lookup('community.general.random_string', length=128, special=false) }}"
      when: not odk_enketo_api_key|default(None)

    - name: Add odk_enketo_api_key to AWS Secrets Manager
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_odk_enketo_api_key"
        state: present
        secret_type: 'string'
        secret: "{{ new_odk_enketo_api_key }}"
      when: not odk_enketo_api_key|default(None)

    - name: Update odk_enketo_api_key
      set_fact:
        odk_enketo_api_key: "{{ new_odk_enketo_api_key }}"
      when: new_odk_enketo_api_key|default(None)

  become: false
  when: fjelltopp_env_type != 'local'

- name: Init ODK backup policy and AWS user
  block:

    - name: Create ODK backup access policy for odk_backup_user user
      community.aws.iam_managed_policy:
        policy_name: eks-odk-backup-access
        state: present
        policy: "{{ lookup( 'template', 'odk/s3_backup_access_policy.json') }}"
      register: backup_policy_output
      become: false
      when: not odk_backup_aws_user_key|default(None)

    - name: Create a ODK backup user and attach a custom policy using its ARN
      community.aws.iam_user:
        region: "{{ aws_region }}"
        name: odk_backup_user
        managed_policies:
          - arn:aws:iam::{{ aws_account_id }}:policy/eks-odk-backup-access
        state: present
      when: not odk_backup_aws_user_key|default(None)

    - name: Create a new access key
      community.aws.iam_access_key:
        region: "{{ aws_region }}"
        user_name: odk_backup_user
        state: present
      register: new_aws_user
      when: not odk_backup_aws_user_key|default(None)

    - name: Add ODK IAM backup user key id
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_odk_backup_user_id"
        state: present
        secret_type: 'string'
        secret: "{{ new_aws_user.access_key.access_key_id }}"
      when: not odk_backup_aws_user_id|default(None)

    - name: Add ODK IAM backup user secret key
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_odk_backup_user_key"
        state: present
        secret_type: 'string'
        secret: "{{ new_aws_user.secret_access_key }}"
      when: not odk_backup_aws_user_key|default(None)

    - name: Update user_id and access_key
      set_fact:
        odk_backup_aws_user_id: "{{ new_aws_user.access_key.access_key_id }}"
        odk_backup_aws_user_key: "{{ new_aws_user.secret_access_key  }}"
      when: not odk_backup_aws_user_key|default(None)

  when: odk_backup_bucket is defined

