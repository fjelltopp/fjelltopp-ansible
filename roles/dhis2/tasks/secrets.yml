---
- name: Init missing secrets
  block:

    - name: Generate postgres password
      set_fact:
        new_postgres_password: "{{ lookup('community.general.random_string', length=32, special=false) }}"
      when: not postgres_password|default(None)

    - name: Add postgres_password to AWS Secrets Manager
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_postgres_password"
        state: present
        secret_type: 'string'
        secret: "{{ new_postgres_password }}"
      when: not postgres_password|default(None)

    - name: Update postgres_password
      set_fact:
        postgres_password: "{{ new_postgres_password }}"
      when: new_postgres_password|default(None)

    - name: Generate admin password
      set_fact:
        new_dhis2_admin_password: "{{ lookup('community.general.random_string', length=32, special=false) }}"
      when: not dhis2_admin_password|default(None)

    - name: Add dhis2_admin_password to AWS Secrets Manager
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_dhis2_admin_password"
        state: present
        secret_type: 'string'
        secret: "{{ new_dhis2_admin_password }}"
      when: not dhis2_admin_password|default(None)

    - name: Update dhis2_admin_password
      set_fact:
        postgres_password: "{{ new_dhis2_admin_password }}"
      when: new_dhis2_admin_password|default(None)


  become: false
  when: fjelltopp_env_type != 'local'

- name: Init DHIS2 filestore policy and AWS user
  block:

    - name: Create DHIS2 filestore access policy for dhis2_filestore user
      community.aws.iam_managed_policy:
        policy_name: eks-dhis2-filestore-access
        state: present
        policy: "{{ lookup( 'template', 'dhis2/s3_filestore_access_policy.json') }}"
      register: filestore_policy_output
      become: false
      when: not dhis2_filestore_aws_user_key|default(None)

    - name: Create a DHIS2 filestore user and attach a custom policy using its ARN
      community.aws.iam_user:
        region: "{{ aws_region }}"
        name: dhis2_filestore
        managed_policies:
          - arn:aws:iam::{{ aws_account_id }}:policy/eks-dhis2-filestore-access
        state: present
      when: not dhis2_filestore_aws_user_key|default(None)

    - name: Create a new access key
      community.aws.iam_access_key:
        region: "{{ aws_region }}"
        user_name: dhis2_filestore
        state: present
      register: new_aws_user
      when: not dhis2_filestore_aws_user_key|default(None)

    - name: Add DHIS2 IAM user key id
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_dhis2_filestore_user_id"
        state: present
        secret_type: 'string'
        secret: "{{ new_aws_user.access_key.access_key_id }}"
      when: not dhis2_filestore_aws_user_id|default(None)

    - name: Add DHIS2 IAM user secret key 
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_dhis2_filestore_user_key"
        state: present
        secret_type: 'string'
        secret: "{{ new_aws_user.secret_access_key }}"
      when: not dhis2_filestore_aws_user_key|default(None)

    - name: Update user_id and access_key
      set_fact:
        dhis2_filestore_aws_user_id: "{{ new_aws_user.access_key.access_key_id }}"
        dhis2_filestore_aws_user_key: "{{ new_aws_user.secret_access_key  }}"
      when: not dhis2_filestore_aws_user_key|default(None)

  when: dhis2_filestore_s3_bucket is defined

- name: Init DHIS2 backup policy and AWS user
  block:

    - name: Create DHIS2 backup access policy for dhis2_backup_user
      community.aws.iam_managed_policy:
        policy_name: eks-dhis2-backup-access
        state: present
        policy: "{{ lookup( 'template', 'dhis2/s3_backup_access_policy.json') }}"
      register: backup_policy_output
      become: false
      when: not dhis2_backup_aws_user_key|default(None)

    - name: Create a DHIS2 backup user and attach a custom policy using its ARN
      community.aws.iam_user:
        region: "{{ aws_region }}"
        name: dhis2_backup_user
        managed_policies:
          - arn:aws:iam::{{ aws_account_id }}:policy/eks-dhis2-backup-access
        state: present
      when: not dhis2_backup_aws_user_key|default(None)

    - name: Create a new access key
      community.aws.iam_access_key:
        region: "{{ aws_region }}"
        user_name: dhis2_backup_user
        state: present
      register: new_aws_user
      when: not dhis2_backup_aws_user_key|default(None)

    - name: Add DHIS2 IAM backup user key id
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_dhis2_backup_user_id"
        state: present
        secret_type: 'string'
        secret: "{{ new_aws_user.access_key.access_key_id }}"
      when: not dhis2_backup_aws_user_id|default(None)

    - name: Add DHIS2 IAM backup user secret key
      community.aws.aws_secret:
        region: "{{ aws_region }}"
        name: "{{ application_namespace }}_dhis2_backup_user_key"
        state: present
        secret_type: 'string'
        secret: "{{ new_aws_user.secret_access_key }}"
      when: not dhis2_backup_aws_user_key|default(None)

    - name: Update user_id and access_key
      set_fact:
        dhis2_backup_aws_user_id: "{{ new_aws_user.access_key.access_key_id }}"
        dhis2_backup_aws_user_key: "{{ new_aws_user.secret_access_key  }}"
      when: not dhis2_backup_aws_user_key|default(None)

  when: dhis2_backup_bucket is defined

