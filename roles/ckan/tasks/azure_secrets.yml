---
- name: Set list of secrets to handle
  set_fact:
    secrets:
      # ANSIBLE_NAME: AZURE_KEYVAULT_NAME
      ckan_ds_ro_pass: ckan-ds-ro-pass
      ckan_ds_rw_pass: ckan-ds-rw-pass
      ckan_postgres_password: ckan-postgres-password
      ckan_beaker_secret: ckan-beaker-secret
      ckan_api_secret: ckan-api-secret
      azure_db_admin_password: azure-db-admin-password
      ckan_superuser_password: ckan-superuser-password
      ckan_admin_api_token: ckan-api-key-datapusher # This should be set manually in the KeyVault when required

- name: Init missing secrets
  block:
    # For each secret, if it's not set in the inventory or already in the keyvault, generate a new one and store it in the Keyvault
    - name: Get Key Vault by name
      azure_rm_keyvault_info:
        resource_group: "{{ resource_group_name }}"
        name: "{{ vault_name }}"
      register: keyvault

    - name: Set key vault URI fact
      set_fact: keyvaulturi="{{ keyvault['keyvaults'][0]['vault_uri'] }}"

    - name: loop through secrets     
      include_tasks: roles/azure_secrets/azure_keyvault_loop_secrets.yml
      loop: "{{ secrets | dict2items(key_name='secret_key', value_name='vault_secret_key')  }}"

    - name: Handle JWT Keys
      block:
        # JWT Keys are slightly different
        - name: JWT Keys Lookup
          azure.azcollection.azure_rm_keyvaultsecret_info:
            vault_uri: "{{ keyvaulturi }}"
            name: jwt-key
          register: jwt_key_result

        - name: JWT Keys Lookup
          azure.azcollection.azure_rm_keyvaultsecret_info:
            vault_uri: "{{ keyvaulturi }}"
            name: jwt-public-key
          register: jwt_public_key_result

        - set_fact:
            secret_result: "{{ jwt_key_result.secrets[0]|default({'secret': false}) }}"

        - set_fact:
            public_secret_result: "{{ jwt_public_key_result.secrets[0]|default({'secret': false}) }}"

        # If secret was not found, generate it, set it and save
        - name: Generate JWT keys
          community.crypto.openssl_privatekey:
            path: /tmp/jwt_ssh_rsa
            type: RSA
            size: 4096
            force: true
            return_content: true
          register: new_jwt_key
          when: not secret_result.secret

        - name: Export JWT public key in PEM format
          community.crypto.openssl_publickey:
            privatekey_path: /tmp/jwt_ssh_rsa
            path: /tmp/jwt_rsa_public_key
            return_content: true
            force: true
          register: new_jwt_public_key
          when: not secret_result.secret

        - name: Save JWT to KeyVault
          azure.azcollection.azure_rm_keyvaultsecret:
            secret_name: jwt-key
            secret_value: "{{ new_jwt_key.privatekey }}"
            keyvault_uri: "{{ keyvaulturi }}"
          when: not secret_result.secret

        - name: Save to JWT Public to KeyVault
          azure.azcollection.azure_rm_keyvaultsecret:
            secret_name: jwt-public-key
            secret_value: "{{ new_jwt_public_key.publickey }}"
            keyvault_uri: "{{ keyvaulturi }}"
          when: not secret_result.secret

        # If secret was not found, set the new secret value
        - name: Set secret value
          set_fact:
            ckan_jwt_private_key: "{{ new_jwt_key }}"
            ckan_jwt_public_key: "{{ new_jwt_public_key }}"
          when: not secret_result.secret

        # If secret was found, set the secret value
        - name: Set secret value
          set_fact:
            ckan_jwt_private_key: "{{ secret_result.secret }}"
            ckan_jwt_public_key: "{{ public_secret_result.secret }}"
          when: secret_result.secret
        
      when: ckan_jwt_private_key is not defined

  become: false
  when: fjelltopp_env_type != 'local'
